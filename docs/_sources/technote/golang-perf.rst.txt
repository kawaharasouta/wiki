========================================================
golangでちょっと文字列関連性能計測した時のいろんなメモ
========================================================

この調査に至った動機
======================

libvirt-go を使ってちょっとしたプログラムを書いていて，
各ドメインから情報をゲットして雑に文字列をいじらなきゃいけないなーと思っていたんだが，
stringや[]byteでの文字列操作に関するパフォーマンスについて触れた記事がいくつかあって，ちょっと掘り出した．

文字列の結合とかそこら辺の話
===============================

文字列の操作に関して，↑に書いたようにstringと[]byteで文字列の操作をできるんだけど，
結合に関してもそのどちらを使うかとかメソッドをどうするかで当然パフォーマンスは変わる．
ところで，stringはgolangではどうもimmutable(不変)なため，
文字列に追加したいときはallocateが必要でそれがめっちゃ遅いみたいな話があって，
[]byteでappendした方がいいとか，
いやいやなんかstrings.Join(というかstrings.Builder)が意外と速いんですよみたいな話とかがあったりする．
それについてはリンクを貼っておくのでそこをみて確認するようにしよう．

- https://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37
- https://qiita.com/ruiu/items/2bb83b29baeae2433a79
- https://qiita.com/spiegel-im-spiegel/items/16ab7dabbd0749281227
- https://text.baldanders.info/golang/join-strings-2/     ☆

僕の状況と↑の話
========================

↑の話は[]stringが与えられて，それを結合する話でした．
strings.Joinは第一引数が[]stringだしね．
ところで今の僕の状況は，
各ドメインから情報をとってきてその情報がstringで帰ってきていて，
それはループで回しながら取る感じだったわけだが，
ここで思うのが，
この状況でstrings.Joinを使いたかったらstringsを[]stringsにするためにappennd祭りを開催する必要があるなと思うわけである．
appendが結構重いみたいな話も聞くから，これだったら実は+してった方が速い可能性あるかもとか，
[]byteで処理させる方法と無視できないくらいの性能差が出てくるんじゃないか(↑の結合の話では差はほとんどないよねくらいの話で終わっている)
みたいなことも思ったりするわけである．

